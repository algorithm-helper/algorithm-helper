categories:
  - key: data-structures
    title: Data Structures
    description: Learn about different methods for data organization and storage that enable efficient access and allow for useful operations. This category will go over various data structures with linear, tree, hashing, probabilistic, and multidimensional properties.
    orderKey: 0
    colorKey: 1
    children:
      - key: lists
        title: Lists
        description: Learn about fundamental linear data structures like linked lists, dynamic arrays, stacks, and queues, where data is generally organized in sequence.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/data-structures/lists.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of linear data structures, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: linked-list
            title: Linked List
            description: Learn about the linked list, a recursively defined sequence of nodes with pointers to the next nodes in the sequence.
            orderKey: 1
            children: ['Article', 'Code']
          - key: double-ended-linked-list
            title: Double Ended Linked List
            description: Learn about the double ended linked list, an augmentation to the linked list where nodes point to the next and previous nodes.
            orderKey: 2
            children: ['Article', 'Code']
          - key: dynamic-array
            title: Dynamic Array
            description: Learn about the dynamic array, an array-based data structure that allows for the expansion of the size of the array efficiently.
            orderKey: 3
            children: ['Article', 'Code']
          - key: stack
            title: Stack
            description: Learn about the stack, a fundamental last-in-first-out data structure, and its implementations with both a linked list and a dynamic array.
            orderKey: 4
            children: ['Article', 'Code']
          - key: queue
            title: Queue
            description: Learn about the queue, a fundamental first-in-first-out data structure, and its implementations with both a linked list and a dynamic array.
            orderKey: 5
            children: ['Article', 'Code']
          - key: double-ended-queue
            title: Double Ended Queue
            description: Learn about the double ended queue, an abstract data structure that supports adding and removing elements from the front and back.
            orderKey: 6
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 7
            children: ['Article', 'Code']
      - key: trees
        title: Trees
        description: Learn about tree data structures like binary search trees, heaps, B-trees, and union find, where operations tend to have logarithmic performance or better.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/data-structures/trees.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of tree data structures, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: map-symbol-table
            title: Map / Symbol Table
            description: Learn about the map / symbol table, an abstract data structure for maintaining a collection of (key, value) pairs.
            orderKey: 1
            children: ['Article', 'Code']
          - key: set
            title: Set
            description: Learn about the set, an abstract data structure for maintaining a collection of unique key elements.
            orderKey: 2
            children: ['Article', 'Code']
          - key: binary-search-tree
            title: Binary Search Tree
            description: Learn about the binary search tree, a tree data structure that uses binary search for the efficient retrieval of elements.
            orderKey: 3
            children: ['Article', 'Code']
          - key: balanced-binary-search-tree
            title: Balanced Binary Search Tree
            description: Learn about the balanced binary search tree, a tree data structure that guarantees logarithmic performance by keeping balanced.
            orderKey: 4
            children: ['Article', 'Code']
          - key: 2-3-tree
            title: 2-3 Tree
            description: Learn about the 2-3 tree, a tree data structure that keeps balance through the mechanism of 2-Nodes and 3-Nodes.
            orderKey: 5
            children: ['Article', 'Code']
          - key: red-black-tree
            title: Red-Black Tree
            description: Learn about the red-black tree, a tree data structure derived from the 2-3 tree, that keeps balance using red and black colored nodes.
            orderKey: 6
            children: ['Article', 'Code']
          - key: avl-tree
            title: AVL Tree
            description: Learn about the AVL tree, a tree data structure that keeps balance through maintaining balance between the heights of subtrees.
            orderKey: 7
            children: ['Article', 'Code']
          - key: heap
            title: Heap
            description: Learn about the heap, a tree data structure that represents the tree in a single array, and implementations for binary min/max heaps.
            orderKey: 8
            children: ['Article', 'Code']
          - key: priority-queue
            title: Priority Queue
            description: Learn about the priority queue, a data structure that uses the heap data structure to allow for efficient retrieval of min/max elements.
            orderKey: 9
            children: ['Article', 'Code']
          - key: union-find-disjoint-set
            title: Union Find / Disjoint Set
            description: Learn about the union find / disjoint set, a data structure used to represent connected components in the problem of dynamic connectivity.
            orderKey: 10
            children: ['Article', 'Code']
          - key: b-tree
            title: B-Tree
            description: Learn about the B-tree, a balanced tree structure that is a generalization of binary search trees, and are commonly used in secondary storage systems.
            orderKey: 11
            children: ['Article', 'Code']
          - key: fibonacci-heap
            title: Fibonacci Heap
            description: Learn about the Fibonacci heap, a heap structure for priority queue operations but that can perform key operations in constant, amortized time.
            orderKey: 12
            children: ['Article', 'Code']
          - key: van-emde-boas-tree
            title: Van Emde Boas Tree
            description: Learn about the Van Emde Boas Tree, a tree structure for implementing maps space efficiently, that supports efficient operations for finding successors and predecessors.
            orderKey: 13
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 14
            children: ['Article', 'Code']
      - key: hashing
        title: Hashing
        description: Learn about using hash functions to implement fundamental data structures called hash maps and hash sets with efficient (constant, amortized) time for operations.
        orderKey: 2
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/data-structures/hashing.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of data structures that use hashing, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: hash-function
            title: Hash Function
            description: Learn about the hash function, a function that enables mapping data of an arbitrary size to data of fixed size.
            orderKey: 1
            children: ['Article', 'Code']
          - key: collision-resolution
            title: Collision Resolution
            description: Learn about collision resolution, the techniques used when dealing with situations where more than one element hash to the same place.
            orderKey: 2
            children: ['Article', 'Code']
          - key: simple-uniform-hashing-assumption
            title: Simple Uniform Hashing Assumption
            description: Learn about the Simple Uniform Hashing Assumption, the basic mathematical assumption that enables the analysis of hash maps.
            orderKey: 3
            children: ['Article', 'Code']
          - key: hash-map
            title: Hash Map
            description: Learn about the hash map, and its implementations with separate chaining and linear probing, that allows for constant time for all operations.
            orderKey: 4
            children: ['Article', 'Code']
          - key: hash-set
            title: Hash Set
            description: Learn about the hash set, and its use to represent the abstract data structure of a set, but using hashing to allow for constant time for all operations.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
      - key: probabilistic
        title: Probabilistic
        description: Learn about probabilistic data structures, which use randomization to lead to operations that are probabilistically expected to be efficient.
        orderKey: 3
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/data-structures/probabilistic.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of probabilistic data structures, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: skip-list
            title: Skip List
            description: Learn about the skip list, a linked list-like data structure that allows for efficient search of a sequence of elements by skipping over elements, whose skips are determined randomly.
            orderKey: 1
            children: ['Article', 'Code']
          - key: bloom-filter
            title: Bloom Filter
            description: Learn about the bloom filter, a data structure commonly used to implement sets that is space efficient, but whose probabilistic properties can lead to false positives.
            orderKey: 2
            children: ['Article', 'Code']
          - key: count-min-sketch
            title: Count Min Sketch
            description: Learn about the count-min sketch, a data structure used to determine frequencies of events in a data stream.
            orderKey: 3
            children: ['Article', 'Code']
          - key: random-binary-tree
            title: Random Binary Tree
            description: Learn about random binary trees, which are binary trees selected from a probability distribution of binary trees, which may be formed with various properties.
            orderKey: 4
            children: ['Article', 'Code']
          - key: treap
            title: Treap
            description: Learn about the treap, which is a binary search tree that uses randomization that leads to a high probability of a tree structure that supports operations in logarithmic time.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
      - key: multidimensional
        title: Multidimensional
        description: Learn about multidimensional data structures, which are used to efficiently store and query data represented in a multidimensional space.
        orderKey: 7
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/data-structures/multidimensional.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of multidimensional data structures, terminology, and concepts that will be covered in this topic.
            orderKey: 8
            children: ['Article', 'Code']
          - key: range-searching
            title: Range Searching
            description: Learn about the problem of range searching, which refers to being able to query for elements within a multidimensional range.
            orderKey: 9
            children: ['Article', 'Code']
          - key: quad-tree
            title: Quad Tree
            description: Learn about the quad tree, a tree structure with four children used to represent quadrants, and thereby commonly used to store data in a 2-dimensional space.
            orderKey: 10
            children: ['Article', 'Code']
          - key: k-d-tree
            title: k-d Tree
            description: Learn about the k-d tree, a tree structure that partitions space to be able to efficiently organize data in a k-dimensional space.
            orderKey: 11
            children: ['Article', 'Code']
          - key: range-tree
            title: Range Tree
            description: Learn about the range tree, a tree structure that uses multiple binary trees to represent data commonly in a 2 or 3-dimensional space, and allows for efficient range queries.
            orderKey: 12
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 13
            children: ['Article', 'Code']
      - key: abstract-data-types
        title: Abstract Data Types
        description: Learn about abstract data types, which are data structures that have a general description of their operations but whose implementations can vary.
        orderKey: 4
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/data-structures/abstract-data-types.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of abstract data types, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: iterator-iterable
            title: Iterator / Iterable
            description: Learn about the iterator, an abstract data type that is used to traverse through the elements of a data structure without exposing its internal implementation.
            orderKey: 1
            children: ['Article', 'Code']
          - key: comparator-comparable
            title: Comparator / Comparable
            description: Learn about the comparator, an abstract data type used for comparing elements for ordering algorithms, commonly for sorting.
            orderKey: 2
            children: ['Article', 'Code']
  - key: general-algorithms
    title: General Algorithms
    description: Learn about fundamental algorithms with very general and commonly used purposes like searching, sorting, selecting, and shuffling.
    orderKey: 1
    colorKey: 2
    children:
      - key: searching
        title: Searching
        description: Learn about algorithms for searching for elements in arrays efficiently, in logarithmic time and better.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/general-algorithms/searching.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the fundamental problem of searching, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: binary-search
            title: Binary Search
            description: Learn about binary search, a searching algorithm for retrieving elements in a sorted array in logarithmic time.
            orderKey: 1
            children: ['Article', 'Code']
          - key: ternary-search
            title: Ternary Search
            description: Learn about ternary search, a searching algorithm for finding the min/max element of a unimodal function.
            orderKey: 2
            children: ['Article', 'Code']
          - key: jump-search
            title: Jump Search
            description: Learn about jump search, a searching algorithm for retrieving elements in a sorted array by taking steps of size sqrt(N).
            orderKey: 3
            children: ['Article', 'Code']
          - key: interpolation-search
            title: Interpolation Search
            description: Learn about interpolation search, a searching algorithm for retrieving elements in a sorted array with elements uniformly distributed.
            orderKey: 4
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 5
            children: ['Article', 'Code']
      - key: sorting
        title: Sorting
        description: Learn about the fundamental problem of sorting, and algorithms like merge sort, quick sort and heap sort.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/general-algorithms/sorting.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the fundamental problem of sorting, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: stability
            title: Stability
            description: Learn about stability, which refers to the property of sorting algorithms to be able to keep identical elements in the same final order.
            orderKey: 1
            children: ['Article', 'Code']
          - key: in-place
            title: In-Place
            description: Learn about in-place, where refers to the property of sorting algorithms to be able to be performed without the use of auxiliary space.
            orderKey: 2
            children: ['Article', 'Code']
          - key: selection-sort
            title: Selection Sort
            description: Learn about selection sort, a sorting algorithm that works by iterating through the array, selecting the minimum element each time.
            orderKey: 3
            children: ['Article', 'Code']
          - key: insertion-sort
            title: Insertion Sort
            description: Learn about insertion sort, a sorting algorithm that works by inserting the next element into the current sorted array.
            orderKey: 4
            children: ['Article', 'Code']
          - key: shell-sort
            title: Shell Sort
            description: Learn about shell sort, a sorting algorithm that uses h-sorting, and takes advantage of insertion sort's efficiency with nearly sorted arrays.
            orderKey: 5
            children: ['Article', 'Code']
          - key: divide-and-conquer
            title: Divide and Conquer
            description: Learn about divide and conquer, an algorithm design paradigm that recursively breaks down a larger problem into easier, smaller, subproblems.
            orderKey: 6
            children: ['Article', 'Code']
          - key: merge-sort
            title: Merge Sort
            description: Learn about merge sort, an efficient sorting algorithm that works by recursively breaking down subarrays and merging sorted subarrays.
            orderKey: 7
            children: ['Article', 'Code']
          - key: quick-sort
            title: Quick Sort
            description: Learn about quick sort, an efficient sorting algorithm that works by using a pivot and recurively sorting elements to the left and right of the pivot.
            orderKey: 8
            children: ['Article', 'Code']
          - key: heap-sort
            title: Heap Sort
            description: Learn about heap sort, an efficient sorting algorithm that works by building a binary min heap out of the elements, and swapping the min element with the last element.
            orderKey: 9
            children: ['Article', 'Code']
          - key: bucket-sort
            title: Bucket Sort
            description: Learn about bucket sort, a sorting algorithm that runs in linear time in the context of sorting integer elements, by moving them to array indices that match the element.
            orderKey: 10
            children: ['Article', 'Code']
          - key: count-sort
            title: Count Sort
            description: Learn about count sort, a sorting algorithm that runs in linear time in the context of sorting integer elements, by using arithmetic to count elements and determine their final position.
            orderKey: 11
            children: ['Article', 'Code']
          - key: radix-sort
            title: Radix Sort
            description: Learn about radix sort, a sorting algorithm that is used to sort integer elements through the use of looking at the least to most significant digits of the elements.
            orderKey: 12
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 13
            children: ['Article', 'Code']
      - key: shuffling
        title: Shuffling
        description: Learn about algorithms like Fisher-Yates and Sattolo's Algorithm to order elements in arrays uniformly randomly.
        orderKey: 2
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/general-algorithms/shuffling.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the fundamental problem of shuffling, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: fisher-yates-shuffle
            title: Fisher-Yates Shuffle
            description: Learn about the Fisher-Yates Shuffle, a shuffling algorithm used to uniformly randomly distribute elements within an array.
            orderKey: 1
            children: ['Article', 'Code']
          - key: sattolos-algorithm
            title: Sattolo's Algorithm
            description: Learn about Sattolo's Algorithm, a shuffling algorithm with the property that elements cannot be shuffled to their initial position.
            orderKey: 2
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 3
            children: ['Article', 'Code']
      - key: selecting
        title: Selecting
        description: Learn about algorithms like quick select and median finding, which have general uses in being able to selecting elements from a set of data with desired properties.
        orderKey: 3
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/general-algorithms/selecting.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of problems related to selecting elements of interest in an array, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: quick-select
            title: Quick Select
            description: Learn about quick select, which is used to find k-smallest elements in a list by using partitioning.
            orderKey: 1
            children: ['Article', 'Code']
          - key: median-finding
            title: Median Finding
            description: Learn about the median finding problem, which refers to finding the element in a data set that is the median.
            orderKey: 2
            children: ['Article', 'Code']
          - key: median-of-medians-algorithm
            title: Median of Medians Algorithm
            description: Learn about the median of medians algorithm, which uses small samples to find a sample median, commonly used for determining good pivots.
            orderKey: 3
            children: ['Article', 'Code']
          - key: peak-finding
            title: Peak Finding
            description: Learn about peak finding, which refers to the problem and algorithm of finding elements that are local maxima (or minima).
            orderKey: 4
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 5
            children: ['Article', 'Code']
  - key: strings
    title: Strings
    description: Learn about data structures and algorithms related to strings, such as efficient ways to store strings using tries, sorting strings with better than linearithmic time, and finding substring matches within a string efficiently.
    orderKey: 2
    colorKey: 3
    children:
      - key: string-data-structures
        title: String Data Structures
        description: Learn about data structures that have special and useful properties when we know that the data or keys being stored are strictly strings.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/strings/string-data-structures.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of data structures related to strings, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: trie
            title: Trie
            description: Learn about the trie, a data structure for maps that uses string keys, and values stored in the suffixes.
            orderKey: 1
            children: ['Article', 'Code']
          - key: r-way-trie
            title: R-Way Trie
            description: Learn about the R-way trie, a trie structure where each node has R (radix) amount of children nodes.
            orderKey: 2
            children: ['Article', 'Code']
          - key: ternary-search-trie
            title: Ternary Search Trie
            description: Learn about the ternary search trie, a trie structure where each node has three children to store smaller, equal, and larger key nodes.
            orderKey: 3
            children: ['Article', 'Code']
          - key: suffix-tree
            title: Suffix Tree
            description: Learn about the suffix tree, which is a compressed trie comprising of the suffixes of a given string, that leads to useful properties and operations.
            orderKey: 4
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 5
            children: ['Article', 'Code']
      - key: string-sorting
        title: String Sorting
        description: Learn about the problem of string sorting, and how we can use non-comparison sorts to achieve more efficient results.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/strings/string-sorting.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the algorithms used for sorting string keys, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: lsd-radix-sort
            title: LSD Radix Sort
            description: Learn about least-significant-digit (LSD) string sort, a sorting algorithm specific to strings that runs in faster than linearithmic time.
            orderKey: 1
            children: ['Article', 'Code']
          - key: msd-radix-sort
            title: MSD Radix Sort
            description: Learn about most-significant-digit (MSD) string sort, a sorting algorithm specific to strings that runs in faster than linearithmic time.
            orderKey: 2
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 3
            children: ['Article', 'Code']
      - key: string-matching
        title: String Matching
        description: Learn about string matching, which is the problem of finding a smaller length pattern string in a larger body of text.
        orderKey: 2
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/strings/string-matching.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the algorithms used for string matching, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: knuth-morris-pratt-algorithm
            title: Knuth-Morris-Pratt Algorithm
            description: Learn about the Knuth-Morris-Pratt algorithm, a string matching algorithm that uses a finite state machine to keep track of the matched string.
            orderKey: 1
            children: ['Article', 'Code']
          - key: boyer-moore-algorithm
            title: Boyer-Moore Algorithm
            description: Learn about the Boyer-Moore algorithm, a string matching algorithm that uses text preprocessing for more efficient search results.
            orderKey: 2
            children: ['Article', 'Code']
          - key: rabin-karp-algorithm
            title: Rabin-Karp Algorithm
            description: Learn about the Rabin-Karp algorithm, a string matching algorithm that uses hashing to find a set of patterns in a text.
            orderKey: 3
            children: ['Article', 'Code']
          - key: approximate-string-matching
            title: Approximate String Matching
            description: Learn about the approximate string matching problem, which refers to finding strings that match approximately rather than exactly, and the various metrics and heuristics that can be used.
            orderKey: 4
            children: ['Article', 'Code']
          - key: bitap-algorithm
            title: Bitap Algorithm
            description: Learn about the bitap algorithm, which uses a bit array to determine approximate string matches.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
      - key: string-metrics
        title: String Metrics
        description: Learn about string metrics, which refers to the different techniques and heuristics used to determine the distance between two strings.
        orderKey: 3
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/strings/string-metrics.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview and motivation of the algorithms used for string metrics, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: edit-distance
            title: Edit Distance
            description: Learn about edit distance, which refers to the number of operations used to transform one string into another.
            orderKey: 1
            children: ['Article', 'Code']
          - key: damerau-levenshtein-distance
            title: Damerau-Levenshtein Distance
            description: Learn about Damerau-Levenshtein distance, which is a string metric used to determine the number of operations to transform one string into another.
            orderKey: 2
            children: ['Article', 'Code']
          - key: hamming-distance
            title: Hamming Distance
            description: Learn about Hamming distance, which refers to determining the number of positions at which two strings differ.
            orderKey: 3
            children: ['Article', 'Code']
          - key: wagner-fischer-algorithm
            title: Wagner-Fischer Algorithm
            description: Learn about the Wagner-Fischer algorithm, which uses dynamic programming to compute the edit distance between two strings.
            orderKey: 4
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 5
            children: ['Article', 'Code']
      - key: compression
        title: Compression
        description: Learn about the fundamental problem of compression, which refers to being able to encode the same data using fewer bits.
        orderKey: 4
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/strings/compression.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of compression algorithms, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: run-length-encoding
            title: Run-Length Encoding
            description: Learn about run-length encoding, a basic method of data compression by counting runs of same bits.
            orderKey: 1
            children: ['Article', 'Code']
          - key: huffman-coding
            title: Huffman Coding
            description: Learn about Huffman coding, a technique and optimal prefix encoding for data compression.
            orderKey: 2
            children: ['Article', 'Code']
          - key: lempel-ziv-welch-algorithm
            title: Lempel-Ziv-Welch Algorithm
            description: Learn about the Lempel-Ziv-Welch algorithm, a compression algorithm that uses a dictionary to encode repeated patterns in a text.
            orderKey: 3
            children: ['Article', 'Code']
          - key: text-transforms
            title: Text Transforms
            description: Learn about text transforms, which refers to converting or rearranging the characters in a string to a more useful format.
            orderKey: 4
            children: ['Article', 'Code']
          - key: burrows-wheeler-transform
            title: Burrows-Wheeler Transform
            description: Learn about the Burrows-Wheeler transform, a text transform that leads to useful results for improving the efficiency of compression algorithms.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
  - key: graphs
    title: Graphs
    description: Learn about data structures and algorithms relating to graphs, a fundamental abstract data type used to model and generalize various types of network-like relationships between data using vertices and edges.
    orderKey: 3
    colorKey: 4
    children:
      - key: graphs
        title: Graphs
        description: Learn about the various ways, advantages, and disadvantages to representing graphs in a data structure as well as useful properties of graphs.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/graphs/graphs.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of graphs and the way to store them as data structures, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: graph-representation
            title: Graph Representation
            description: Learn about graph representation, and the three main implementations using edge lists, vertex matrices, and adjacency lists.
            orderKey: 1
            children: ['Article', 'Code']
          - key: undirected-and-directed-graphs
            title: Undirected and Directed Graphs
            description: Learn about undirected and directed graphs, two types of graphs that greatly dictate the limitations of certain algorithms used on them.
            orderKey: 2
            children: ['Article', 'Code']
          - key: sparse-and-dense-graphs
            title: Sparse and Dense Graphs
            description: Learn about sparse and dense graphs, two types of graphs that refer to the property of the number of vertex and edges within the graph.
            orderKey: 3
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons of fundamental operations between the data structures listed in this topic.
            orderKey: 4
            children: ['Article', 'Code']
      - key: path-finding
        title: Path Finding
        description: Learn about path finding, the fundamental problem within graphs of being able to find a sequence of edges that go from a starting vertex to ending vertex.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/graphs/path-finding.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of path finding algorithms in the context of graphs, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: depth-first-search
            title: Depth First Search
            description: Learn about depth first search, a basic graph traversal algorithm with the property of always choosing adjacent vertices to be the next to be traversed.
            orderKey: 1
            children: ['Article', 'Code']
          - key: breadth-first-search
            title: Breadth First Search
            description: Learn about breadth first search, a basic graph traversal algorithm with the property of always at the same level to be the next to be traversed.
            orderKey: 2
            children: ['Article', 'Code']
          - key: connected-components
            title: Connected Components
            description: Learn about connected components, and using the depth first search algorithm to determine if two vertices belong to the same component.
            orderKey: 3
            children: ['Article', 'Code']
          - key: topological-sort
            title: Topological Sort
            description: Learn about topological sort, an algorithm for the linear ordering of vertices in a graph such that for all edges (u, v), u comes before v.
            orderKey: 4
            children: ['Article', 'Code']
          - key: kahns-topological-sort-algorithm
            title: Kahn's Topological Sort Algorithm
            description: Learn about Kahn's Topological Sort Algorithm, an algorithm for the topological ordering of a directed graph, by using depth first search.
            orderKey: 5
            children: ['Article', 'Code']
          - key: strongly-connected-components
            title: Strongly Connected Components
            description: Learn about strongly connected components, a property such that there exists a path from any vertex to every other vertex in a subgraph.
            orderKey: 6
            children: ['Article', 'Code']
          - key: kosarajus-algorithm
            title: Kosaraju's Algorithm
            description: Learn about Kosaraju's Algorithm, an algorithm used for determining strongly connected components, by topological sorting and then using depth first search.
            orderKey: 7
            children: ['Article', 'Code']
          - key: time-and-space-complexity
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 8
            children: ['Article', 'Code']
      - key: shortest-path-finding
        title: Shortest Path Finding
        description: Learn about shorted path finding, which is a fundamental problem in graph theory of being able to find the path from one vertex to another with the least combined weight.
        orderKey: 2
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/graphs/shortest-path-finding.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of shortest path finding algorithms in the context of graphs, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: weighted-graph
            title: Weighted Graph
            description: Learn about weighted graphs, which are graphs such that the edges are given a numerical weight, which may represent length, cost, or capacity.
            orderKey: 1
            children: ['Article', 'Code']
          - key: edge-relaxation
            title: Edge Relaxation
            description: Learn about edge relaxation, which is a common operation used in shortest path finding algorithms, that is used to lower the cost of reaching a vertex by using another vertex.
            orderKey: 2
            children: ['Article', 'Code']
          - key: dijkstras-algorithm
            title: Dijkstra's Algorithm
            description: Learn about Dijkstra's Algorithm, a shortest path finding algorithm that is efficient for finding shortest paths in a graph with non-negative edge weights.
            orderKey: 3
            children: ['Article', 'Code']
          - key: bellman-ford-algorithm
            title: Bellman-Ford Algorithm
            description: Learn about the Bellman-Ford Algorithm, a shortest path finding algorithm that is used for finding shortest paths with potentially negative edge weights.
            orderKey: 4
            children: ['Article', 'Code']
          - key: floyd-warshall-algorithm
            title: Floyd-Warshall Algorithm
            description: Learn about the Floyd-Warshall Algorithm, a shortest path finding algorithm that is used for finding shortest paths with negative edge weights by using dynamic programming.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
      - key: minimum-spanning-trees
        title: Minimum Spanning Trees
        description: Learn about minimum spanning trees, which are a set of edges of a graph such that they connect all of the vertices with no cycles between them.
        orderKey: 3
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/graphs/minimum-spanning-trees.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of minimum spanning trees, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: greedy-algorithm
            title: Greedy Algorithm
            description: Learn about greedy algorithms, a class of algorithms with the property of always choosing the locally optimal choice with the goal of achieving a globally optimal solution.
            orderKey: 1
            children: ['Article', 'Code']
          - key: prims-algorithm
            title: Prim's Algorithm
            description: Learn about Prim's Algorithm, an algorithm for finding the minimum spanning tree by always choosing the next least weight edge from the current minimum spanning tree.
            orderKey: 2
            children: ['Article', 'Code']
          - key: kruskals-algorithm
            title: Kruskal's Algorithm
            description: Learn about Kruskal's Algorithm, an algorithm for finding the minimum spanning tree by always choosing the next least weight edge overall such that no cycles are formed.
            orderKey: 3
            children: ['Article', 'Code']
          - key: clustering
            title: Clustering
            description: Learn about the clustering problem, which refers to organizing points into k groups or clusters that maximize the distance between them.
            orderKey: 4
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 5
            children: ['Article', 'Code']
      - key: flow-networks
        title: Flow Networks
        description: Learn about flow networks, a type of graph such that all edges have capacities, and recieve flows, and the flow cannot exceed the capacity.
        orderKey: 4
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/graphs/flow-networks.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the data structures and algorithms for representing flow networks, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: max-flow-min-cut
            title: Max Flow Min Cut
            description: Learn about max flow min cut, a concept in network flow that states the max flow from the source to sink is equal to the total weight fo the edges in the min cut.
            orderKey:
            children: ['Article', 'Code']
          - key: ford-fulkerson-algorithm
            title: Ford-Fulkerson Algorithm
            description: Learn about the Ford-Fulkerson Algorithm, an algorithm for finding the max flow within a flow network by greedily augmenting paths.
            orderKey: 2
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 3
            children: ['Article', 'Code']
  - key: randomization
    title: Randomization
    description: Learn about algorithms that use randomization like quick select and quick sort that often lead to elegant solutions but whose time complexity can only be probabilistically determined, as well as random number generators.
    orderKey: 4
    colorKey: 5
    children:
      - key: randomized-algorithms
        title: Randomized Algorithms
        description: Learn about randomized algorithms, which are algorithms that use randomization as part of its implementation.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/randomization/randomized-algorithms.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of randomized algorithms, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: expected-time
            title: Expected Time
            description: Learn about expected time, an aspect of algorithmic analysis that deals with determining probabilistically expected complexity of certain algorithms.
            orderKey: 1
            children: ['Article', 'Code']
          - key: quick-select-revisited
            title: Quick Select (Revisited)
            description: Learn about quick select, revisited but in the context of randomized algorithms, and how to analyze its time complexity more precisely.
            orderKey: 2
            children: ['Article', 'Code']
          - key: quick-sort-revisited
            title: Quick Sort (Revisited)
            description: Learn about quick sort, revisited but in the context of randomized algorithms, and how to analyze its time complexity more precisely.
            orderKey: 3
            children: ['Article', 'Code']
          - key: monte-carlo-algorithm
            title: Monte Carlo Algorithm
            description: Learn about Monte Carlo algorithms, which are a type of randomized algorithms that are guaranteed to be fast but only probabilistically correct.
            orderKey: 4
            children: ['Article', 'Code']
          - key: las-vegas-algorithm
            title: Las Vegas Algorithm
            description: Learn about Las Vegas algorithms, which are a type of randomized algorithms that are guaranteed to be correct but only probabilistically fast.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
      - key: random-number-generators
        title: Random Number Generators
        description: Learn about techniques for implementing random number generators such as with the lagged Fibonacci generator and linear congruential generator.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/randomization/random-number-generators.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of random number generators, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: pseudorandom-number-generators
            title: Pseudo Random Number Generators
            description: Learn about pseudorandom number generators, which are deterministic algorithms for generating sequences of numbers with properties that approximate sequences of random numbers.
            orderKey: 1
            children: ['Article', 'Code']
          - key: blum-blum-shub
            title: Blum Blum Shub
            description: Learn about the Blum Blum Shub algorithm, an algorithm for pseudorandom number generation that uses primes and modularization.
            orderKey: 2
            children: ['Article', 'Code']
          - key: lagged-fibonacci-generator
            title: Lagged Fibonacci Generator
            description: Learn about the Lagged Fibonacci generator, an algorithm for pseudorandom number generation that uses a generalization of the Fibonacci sequence.
            orderKey: 3
            children: ['Article', 'Code']
          - key: linear-congruential-generator
            title: Linear Congruential Generator
            description: Learn about the linear congruential generator, an algorithm for pseudorandom number generation that uses a discontinuous piecewise linear function.
            orderKey: 4
            children: ['Article', 'Code']
          - key: mersenne-twister
            title: Mersenne Twister
            description: Learn about the Mersenne Twister, an algorithm for pseudorandom number generation that uses Mersenne primes.
            orderKey: 5
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 6
            children: ['Article', 'Code']
  - key: mathematics
    title: Mathematics
    description: Learn about general algorithms used in the context of mathematics, such as multiplication, polynomial multiplication, and computing convex hulls.
    orderKey: 5
    colorKey: 6
    children:
      - key: numerical-computation
        title: Numerical Computation
        description: Learn about numerical computation, which refers to algorithms that deal with efficient computation in the context of mathematics.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/mathematics/numerical-computation.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of numerical computation, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: euclids-algorithm
            title: Euclid's Algorithm
            description: Learn about Euclid's algorithm, an efficient algorithm for computing the greatest common divisor (GCD) between two numbers.
            orderKey: 1
            children: ['Article', 'Code']
          - key: multiplication-algorithm
            title: Multiplication Algorithm
            description: Learn about multiplication algorithms, which are algorithms used to multiply two numbers faster than standard multiplication.
            orderKey: 2
            children: ['Article', 'Code']
          - key: karatsuba-algorithm
            title: Karatsuba Algorithm
            description: Learn about the Karatsuba algorithm, a multiplication algorithm that runs in faster than quadratic time.
            orderKey: 3
            children: ['Article', 'Code']
          - key: newton-raphson-method
            title: Newton-Raphson Method
            description: Learn about the Newton-Raphson method, which is a method used for finding better approximations to the roots of a function.
            orderKey: 4
            children: ['Article', 'Code']
          - key: modular-exponentiation
            title: Modular Exponentiation
            description: Learn about modular exponentiation, an efficient method of exponentiation over a modulus.
            orderKey: 5
            children: ['Article', 'Code']
          - key: linear-programming
            title: Linear Programming
            description: Learn about linear programming, which is the technique of maximizing and minimizing a linear function over a set of constraints, and bring linear programs to useful standard forms.
            orderKey: 6
            children: ['Article', 'Code']
          - key: simplex-algorithm
            title: Simplex Algorithm
            description: Learn about the simplex algorithm, a classic algorithm that uses simplex's to solve linear programs.
            orderKey: 7
            children: ['Article', 'Code']
          - key: polynomial-multiplication
            title: Polynomial Multiplication
            description: Learn about the fundamental problem of polynomial multiplication, which refers to methods of multiplying polynomials in faster than quadratic time.
            orderKey: 8
            children: ['Article', 'Code']
          - key: fast-fourier-transform
            title: Fast Fourier Transform
            description: Learn about the fast Fourier transform which uses the characteristics of roots of unity to perform polynomial multiplication in linearithmic time, as well as other important applications.
            orderKey: 9
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 10
            children: ['Article', 'Code']
      - key: computational-geometry
        title: Computational Geometry
        description: Learn about computational geometry, which refer to algorithms that deal with data with geometric properties, like determining the convex hull.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/mathematics/computational-geometry.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of computational geometry, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: convex-hull
            title: Convex Hull
            description: Learn about the convex hull problem, which is finding the smallest convex set that contains a set of points.
            orderKey: 1
            children: ['Article', 'Code']
          - key: graham-scan
            title: Graham Scan
            description: Learn about the Graham scan, an efficient method for computing the convex hull of a set of points in linearithmic time.
            orderKey: 2
            children: ['Article', 'Code']
          - key: jarvis-algorithm
            title: Jarvis Algorithm
            description: Learn about the Jarvis algorithm, an efficient method for computing the convex hull of a set of points.
            orderKey: 3
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 4
            children: ['Article', 'Code']
  - key: dynamic-programming
    title: Dynamic Programming
    description: Learn about dynamic programming, an important and useful programming technique to solve problems by saving the results of successively smaller subproblems and using them to solve a larger problem.
    orderKey: 6
    colorKey: 7
    children:
      - key: dynamic-programming
        title: Dynamic Programming
        description: Learn about the basics, techniques and motivations behind dynamic programming, and how memoization is used to facilitate it.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/dynamic-programming/dynamic-programming.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of dynamic programming, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: overlapping-subproblems-and-optimal-substructures
            title: Overlapping Subproblems and Optimal Substructures
            description: Learn about the overlapping subproblem and optimal substructures, which are fundamental properties of a problem to be able to apply dynamic programming.
            orderKey: 1
            children: ['Article', 'Code']
          - key: memoization
            title: Memoization
            description: Learn about memoization, which refers to a technique of storing result of previous subproblems that is crucial in dynamic programming.
            orderKey: 2
            children: ['Article', 'Code']
      - key: dynamic-programming-problems
        title: Dynamic Programming Problems
        description: Learn about dynamic programming techniques applied to a canonical list of problems.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/dynamic-programming/dynamic-programming-problems.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of canonical dynamic programming problems, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: fibonacci-number
            title: Fibonacci Number
            description: Learn about the Fibonacci number problem, which refers to efficiently computing a particular Fibonacci number and the downsides of a naive solution.
            orderKey: 1
            children: ['Article', 'Code']
          - key: maximum-sum-contiguous-subarray
            title: Maximum Sum Contiguous Subarray
            description: Learn about the maximum sum contiguous subarray problem, which refers to finding a contiguous (in sequence) subarray that has the maximum sum.
            orderKey: 2
            children: ['Article', 'Code']
          - key: kadanes-algorithm
            title: Kadane's Algorithm
            description: Learn about Kadane's algorithm, a simple dynamic programming algorithm used to find the maximum contiguous subarray using linear time but constant space.
            orderKey: 3
            children: ['Article', 'Code']
          - key: longest-common-subsequence
            title: Longest Common Subsequence
            description: Learn about the longest common subsequence problem, which refers to finding the subsequence (elements not necessarily in order) of maximum length between two arrays.
            orderKey: 4
            children: ['Article', 'Code']
          - key: longest-increasing-subsequence
            title: Longest Increasing Subsequence
            description: Learn about the longest increasing subsequence problem, which refers to finding a subsequence (elements not necessarily in order) of maximum length where each successive element is greater than the previous.
            orderKey: 5
            children: ['Article', 'Code']
          - key: longest-common-substring
            title: Longest Common Substring
            description: Learn about the longest common substring problem, which refers to finding the substring in common between two strings of maximum length.
            orderKey: 6
            children: ['Article', 'Code']
          - key: longest-palindromic-substring
            title: Longest Palindromic Substring
            description: Learn about the longest palindromic substring problem, which refers to finding the substring of maximum length that is also a palindrome (same forwards as reversed).
            orderKey: 7
            children: ['Article', 'Code']
          - key: binomial-coefficient
            title: Binomial Coefficient
            description: Learn about the binomial coefficient problem, which refers to determining n choose k operations.
            orderKey: 8
            children: ['Article', 'Code']
          - key: coin-change-problem
            title: Coin Change Problem
            description: Learn about the coin change problem, which refers to being able to create the minimum amount of coins for change given an arbitrary set of values of possible denominations.
            orderKey: 9
            children: ['Article', 'Code']
          - key: maximum-size-square-submatrix
            title: Maximum Size Square Submatrix
            description: Learn about the maximum size square submatrix problem, which refers to finding the largest submatrix of all 1's in a matrix with binary values.
            orderKey: 10
            children: ['Article', 'Code']
          - key: assembly-line-scheduling
            title: Assembly Line Scheduling
            description: Learn about the assembly line scheduling problem, which refers to minimizing the time needed to "assemble" a certain product given multiple assembly lines.
            orderKey: 11
            children: ['Article', 'Code']
          - key: rod-cutting
            title: Rod Cutting
            description: Learn about the rod cutting problem, which refers to splitting up the length of a rod, and maximizing the total value of each individual piece.
            orderKey: 12
            children: ['Article', 'Code']
          - key: levenschtein-edit-distance
            title: Levenschtein Edit Distance
            description: Learn about the dynamic programming algorithm used for determining the Levenschtein edit distance.
            orderKey: 13
            children: ['Article', 'Code']
          - key: 0-1-knapsack-problem
            title: 0-1 Knapsack Problem
            description: Learn about the 0-1 Knapsack problem, which is the problem of determining which combination of items with weights and values maximizes value.
            orderKey: 14
            children: ['Article', 'Code']
          - key: time-and-space-complexity-comparison
            title: Time and Space Complexity Comparison
            description: Learn about the time and space complexity comparisons between the algorithms listed in this topic.
            orderKey: 15
            children: ['Article', 'Code']
  - key: algorithmic-analysis
    title: Algorithmic Analysis
    description: Learn about algorithmic analysis, which is a part of computational complexity theory, and refers to being able to determine the rate of growth in time and space of algorithms, and classifying them.
    orderKey: 7
    colorKey: 8
    children:
      - key: computational-complexity
        title: Computational Complexity
        description: Learn about computational complexity, which refers to the various methods we use to determine the rate of growth in the requirement of time and space.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/algorithmic-analysis/computational-complexity.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of computational complexity, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: big-o-notation
            title: Big-O Notation
            description: Learn abotu big-O notation in the context of O, Omega and Theta, which are used to determining lower, upper, and tight bounds on the complexity of a problem.
            orderKey: 1
            children: ['Article', 'Code']
          - key: small-o-notation
            title: Small-O Notation
            description: Learn about small-O notation, which is used in determining strict upper and lower bounds on the complexity of a problem.
            orderKey: 2
            children: ['Article', 'Code']
          - key: amortization
            title: Amortization
            description: Learn about amortization, an analysis method for time and space complexity, and its context within data structures and algorithms.
            orderKey: 3
            children: ['Article', 'Code']
      - key: complexity-classes
        title: Complexity Classes
        description: Learn about complexity classes, which refers to classifiying problems by the rate of growth in necessary time and space needed to solve a particular problem.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/algorithmic-analysis/complexity-classes.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of complexity classes, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: p-complexity
            title: P Complexity
            description: Learn about polynomial time, a common class of problems for which polynomial time algorithms exist to solve them, and the various characteristic of those problems.
            orderKey: 1
            children: ['Article', 'Code']
          - key: np-complexity
            title: NP Complexity
            description: Learn about non-deterministic polynomial time, a class of problems for which no polynomial time algorithm exists to solve them, but which may be verified in polynomial time.
            orderKey: 2
            children: ['Article', 'Code']
  - key: software-engineering
    title: Software Engineering
    description: Learn about various aspects of software engineering, from programming paradigms like object oriented programming, software design principles like design patterns, and useful skills like Bash scripting and using regular expressions.
    orderKey: 8
    colorKey: 9
    children:
      - key: object-oriented-programming
        title: Object Oriented Programming
        description: Learn about object oriented programming concepts like encapsulation, inheritance, and polymorphism.
        orderKey: 0
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/software-engineering/object-oriented-programming.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the motivations behind object oriented programming, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: class-and-instance
            title: Class and Instance
            description: Learn about classes and instances, which are are structures for a template of creating objects, and concrete occurences of that object.
            orderKey: 1
            children: ['Article', 'Code']
          - key: inheritance
            title: Inheritance
            description: Learn about inheritance, which is when an object of a particular class is able to acquire all of the properties, methods and functions of its parent class.
            orderKey: 2
            children: ['Article', 'Code']
          - key: encapsulation
            title: Encapsulation
            description: Learn about encapsulation, which is a property of Objects to be able to restrict access to its internal fields, methods and functions.
            orderKey: 3
            children: ['Article', 'Code']
          - key: polymorphism
            title: Polymorphism
            description: Learn about polymorphism, which is the mechanism of being able to use some abstract interface to apply to multiple classes that implement that interface.
            orderKey: 4
            children: ['Article', 'Code']
      - key: functional-programming
        title: Functional Programming
        description: Learn about functional programming concepts like lambda notation, function composition, filter, map, and reduce.
        orderKey: 1
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/software-engineering/functional-programming.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the motivations behind functional programming, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: first-class-function
            title: First Class Function
            description: Learn about the first class function, which is a property of functional programming languages where functions can be passed as arguments to other functions.
            orderKey: 1
            children: ['Article', 'Code']
          - key: recursion
            title: Recursion
            description: Learn about recursion, a programming method and general mechanism in functional programming, where solutions to problems depend on smaller subproblems.
            orderKey: 2
            children: ['Article', 'Code']
          - key: lambda-notation
            title: Lambda Notation
            description: Learn about lambda notation, a system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution.
            orderKey: 3
            children: ['Article', 'Code']
          - key: function-composition
            title: Function Composition
            description: Learn about function composition, a technique in functional programming for applying functions to the result of another function to produce a third function.
            orderKey: 4
            children: ['Article', 'Code']
          - key: map-filter-reduce
            title: Map, Filter, Reduce
            description: Learn about map, filter, and reduce, which are fundamental functions that operate on lists of elements, and are used to augment, remove, and combine elements.
            orderKey: 5
            children: ['Article', 'Code']
          - key: currying
            title: Currying
            description: Learn about currying, a technique in functional programming to translate the evaluation of a function with multiple arguments into a evaluating a sequence of functions.
            orderKey: 6
            children: ['Article', 'Code']
          - key: compose
            title: Compose
            description: Learn about compose, a technique in functional programming for simplifying function composition.
            orderKey: 7
            children: ['Article', 'Code']
          - key: piping
            title: Piping
            description: Learn about piping, a technique in functional programming for feeding the output of one function as the input of a subsequent function.
            orderKey: 8
            children: ['Article', 'Code']
          - key: zip-unzip
            title: Zip, Unzip
            description: Learn about zip and unzip, which are techniques in functional programming for combining two lists into a list of tuples and vice versa.
            orderKey: 9
            children: ['Article', 'Code']
      - key: design-patterns
        title: Design Patterns
        description: Learn about software design patterns like factories, builders, and observers, for solving common problems that occur often in software development.
        orderKey: 2
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/software-engineering/design-patterns.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of the motivations behind using design patterns, terminology and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: adapter
            title: Adapter
            description: Learn about the adapter pattern, which is used for converting incompatible interfaces.
            orderKey: 1
            children: ['Article', 'Code']
          - key: bridge
            title: Bridge
            description: Learn about the bridge pattern, which is used for decoupling abstractions from their implementations.
            orderKey: 2
            children: ['Article', 'Code']
          - key: builder
            title: Builder
            description: Learn about the builder pattern, which is used for constructing and parsing complex objects.
            orderKey: 3
            children: ['Article', 'Code']
          - key: chain-of-responsibility
            title: Chain of Responsibility
            description: Learn about the chain of responsibility pattern, which is using more than one object to handle a request.
            orderKey: 4
            children: ['Article', 'Code']
          - key: command
            title: Command
            description: Learn about the command pattern, which is used to encapsulate and parameterize a request object.
            orderKey: 5
            children: ['Article', 'Code']
          - key: composite
            title: Composite
            description: Learn about the composite pattern, which is used to represent objects in a recursive tree structure.
            orderKey: 6
            children: ['Article', 'Code']
          - key: decorator
            title: Decorator
            description: Learn about the decorator pattern, which is used to attach functionality to an object dynamically.
            orderKey: 7
            children: ['Article', 'Code']
          - key: factory
            title: Factory
            description: Learn about the factory pattern, which is used to create objects of different parameters.
            orderKey: 8
            children: ['Article', 'Code']
          - key: iterator
            title: Iterator
            description: Learn about the iterator pattern, which is used to traverse through a collection of objects without breaking encapsulation.
            orderKey: 9
            children: ['Article', 'Code']
          - key: null-object
            title: Null Object
            description: Learn about the null object pattern, which is used to encapsulate the absence of an object.
            orderKey: 10
            children: ['Article', 'Code']
          - key: observer
            title: Observer
            description: Learn about the observer pattern, which is used for objects to automatically update its dependents.
            orderKey: 11
            children: ['Article', 'Code']
          - key: prototype
            title: Prototype
            description: Learn about the prototype pattern, which is used to instantiate objects with specific parameters.
            orderKey: 12
            children: ['Article', 'Code']
          - key: singleton
            title: Singleton
            description: Learn about the singleton pattern, which is used to instantiate an object of only one instance.
            orderKey: 13
            children: ['Article', 'Code']
          - key: strategy
            title: Strategy
            description: Learn about the strategy pattern, which is used to encapsulate a family of algorithms.
            orderKey: 14
            children: ['Article', 'Code']
          - key: template-method
            title: Template Method
            description: Learn about the template method pattern, which is used to provide a skeleton for a particular class.
            orderKey: 15
            children: ['Article', 'Code']
          - key: visitor
            title: Visitor
            description: Learn about the visitor pattern, which is used to perform dynamic dispatch on multiple polymorphic objects.
            orderKey: 16
            children: ['Article', 'Code']
      - key: bash-scripting
        title: Bash Scripting
        description: Learn about the syntax of scripting in Bash, a commonly used shell and command language, as well as useful functions and operations.
        orderKey: 3
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/software-engineering/bash-scripting.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of Bash scripting, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: shell-scripts
            title: Shell Scripts
            description: Learn about creating shell scripts, variables, and working with standard streams.
            orderKey: 1
            children: ['Article', 'Code']
          - key: common-functions
            title: Common Functions
            description: Learn about common and useful functions in shell scripts, and how they can be used in conjunction.
            orderKey: 2
            children: ['Article', 'Code']
          - key: exit-status-codes
            title: Exit Status Codes
            description: Learn about the purpose and use of exit status codes, which give shell scripts useful information, often of other shell scripts themselves.
            orderKey: 3
            children: ['Article', 'Code']
          - key: file-access-in-scripts
            title: File Access in Scripts
            description: Learn about various functions and techniques for file access and manipulation using shell scripts.
            orderKey: 4
            children: ['Article', 'Code']
      - key: regular-expressions
        title: Regular Expressions
        description: Learn about regular expressions, which are sequences of characters that define a search pattern, commonly used to search for matches within a piece of text.
        orderKey: 4
        imageUrl: 'https://s3.amazonaws.com/algorithm-helper/assets/icons/software-engineering/regular-expressions.png'
        children:
          - key: introduction
            title: Introduction
            description: General overview of regular expressions in the context of computer science theory, terminology, and concepts that will be covered in this topic.
            orderKey: 0
            children: ['Article', 'Code']
          - key: basic-syntax
            title: Basic Syntax
            description: Learn about the various syntax used to construct regular expressions, and how they can be combined to create concise and useful patterns.
            orderKey: 1
            children: ['Article', 'Code']
          - key: regex-flags
            title: Regex Flags
            description: Learn about regex flags, which refers to common flags used to modifying the behavior of matches.
            orderKey: 2
            children: ['Article', 'Code']
          - key: grouping-and-capturing
            title: Grouping and Capturing
            description: Learn about grouping and capturing, which refers to finding matches around some defined group of tokens, but being able to return those tokens themselves.
            orderKey: 3
            children: ['Article', 'Code']
          - key: look-ahead-look-behind
            title: Look Ahead, Look Behind
            description: Learn about look ahead and look behind, which refers to making assertions about next or previous characters.
            orderKey: 4
            children: ['Article', 'Code']
